// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: acl_guard.proto

#ifndef PROTOBUF_acl_5fguard_2eproto__INCLUDED
#define PROTOBUF_acl_5fguard_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tao {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_acl_5fguard_2eproto();
void protobuf_AssignDesc_acl_5fguard_2eproto();
void protobuf_ShutdownFile_acl_5fguard_2eproto();

class ACLSet;
class SignedACLSet;

// ===================================================================

class ACLSet : public ::google::protobuf::Message {
 public:
  ACLSet();
  virtual ~ACLSet();

  ACLSet(const ACLSet& from);

  inline ACLSet& operator=(const ACLSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ACLSet& default_instance();

  void Swap(ACLSet* other);

  // implements Message ----------------------------------------------

  ACLSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ACLSet& from);
  void MergeFrom(const ACLSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string entries = 1;
  inline int entries_size() const;
  inline void clear_entries();
  static const int kEntriesFieldNumber = 1;
  inline const ::std::string& entries(int index) const;
  inline ::std::string* mutable_entries(int index);
  inline void set_entries(int index, const ::std::string& value);
  inline void set_entries(int index, const char* value);
  inline void set_entries(int index, const char* value, size_t size);
  inline ::std::string* add_entries();
  inline void add_entries(const ::std::string& value);
  inline void add_entries(const char* value);
  inline void add_entries(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& entries() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_entries();

  // @@protoc_insertion_point(class_scope:tao.ACLSet)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> entries_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_acl_5fguard_2eproto();
  friend void protobuf_AssignDesc_acl_5fguard_2eproto();
  friend void protobuf_ShutdownFile_acl_5fguard_2eproto();

  void InitAsDefaultInstance();
  static ACLSet* default_instance_;
};
// -------------------------------------------------------------------

class SignedACLSet : public ::google::protobuf::Message {
 public:
  SignedACLSet();
  virtual ~SignedACLSet();

  SignedACLSet(const SignedACLSet& from);

  inline SignedACLSet& operator=(const SignedACLSet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignedACLSet& default_instance();

  void Swap(SignedACLSet* other);

  // implements Message ----------------------------------------------

  SignedACLSet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignedACLSet& from);
  void MergeFrom(const SignedACLSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes serialized_aclset = 1;
  inline bool has_serialized_aclset() const;
  inline void clear_serialized_aclset();
  static const int kSerializedAclsetFieldNumber = 1;
  inline const ::std::string& serialized_aclset() const;
  inline void set_serialized_aclset(const ::std::string& value);
  inline void set_serialized_aclset(const char* value);
  inline void set_serialized_aclset(const void* value, size_t size);
  inline ::std::string* mutable_serialized_aclset();
  inline ::std::string* release_serialized_aclset();
  inline void set_allocated_serialized_aclset(::std::string* serialized_aclset);

  // required bytes signature = 2;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 2;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const void* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:tao.SignedACLSet)
 private:
  inline void set_has_serialized_aclset();
  inline void clear_has_serialized_aclset();
  inline void set_has_signature();
  inline void clear_has_signature();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* serialized_aclset_;
  ::std::string* signature_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_acl_5fguard_2eproto();
  friend void protobuf_AssignDesc_acl_5fguard_2eproto();
  friend void protobuf_ShutdownFile_acl_5fguard_2eproto();

  void InitAsDefaultInstance();
  static SignedACLSet* default_instance_;
};
// ===================================================================


// ===================================================================

// ACLSet

// repeated string entries = 1;
inline int ACLSet::entries_size() const {
  return entries_.size();
}
inline void ACLSet::clear_entries() {
  entries_.Clear();
}
inline const ::std::string& ACLSet::entries(int index) const {
  return entries_.Get(index);
}
inline ::std::string* ACLSet::mutable_entries(int index) {
  return entries_.Mutable(index);
}
inline void ACLSet::set_entries(int index, const ::std::string& value) {
  entries_.Mutable(index)->assign(value);
}
inline void ACLSet::set_entries(int index, const char* value) {
  entries_.Mutable(index)->assign(value);
}
inline void ACLSet::set_entries(int index, const char* value, size_t size) {
  entries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ACLSet::add_entries() {
  return entries_.Add();
}
inline void ACLSet::add_entries(const ::std::string& value) {
  entries_.Add()->assign(value);
}
inline void ACLSet::add_entries(const char* value) {
  entries_.Add()->assign(value);
}
inline void ACLSet::add_entries(const char* value, size_t size) {
  entries_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ACLSet::entries() const {
  return entries_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ACLSet::mutable_entries() {
  return &entries_;
}

// -------------------------------------------------------------------

// SignedACLSet

// required bytes serialized_aclset = 1;
inline bool SignedACLSet::has_serialized_aclset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignedACLSet::set_has_serialized_aclset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignedACLSet::clear_has_serialized_aclset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignedACLSet::clear_serialized_aclset() {
  if (serialized_aclset_ != &::google::protobuf::internal::kEmptyString) {
    serialized_aclset_->clear();
  }
  clear_has_serialized_aclset();
}
inline const ::std::string& SignedACLSet::serialized_aclset() const {
  return *serialized_aclset_;
}
inline void SignedACLSet::set_serialized_aclset(const ::std::string& value) {
  set_has_serialized_aclset();
  if (serialized_aclset_ == &::google::protobuf::internal::kEmptyString) {
    serialized_aclset_ = new ::std::string;
  }
  serialized_aclset_->assign(value);
}
inline void SignedACLSet::set_serialized_aclset(const char* value) {
  set_has_serialized_aclset();
  if (serialized_aclset_ == &::google::protobuf::internal::kEmptyString) {
    serialized_aclset_ = new ::std::string;
  }
  serialized_aclset_->assign(value);
}
inline void SignedACLSet::set_serialized_aclset(const void* value, size_t size) {
  set_has_serialized_aclset();
  if (serialized_aclset_ == &::google::protobuf::internal::kEmptyString) {
    serialized_aclset_ = new ::std::string;
  }
  serialized_aclset_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignedACLSet::mutable_serialized_aclset() {
  set_has_serialized_aclset();
  if (serialized_aclset_ == &::google::protobuf::internal::kEmptyString) {
    serialized_aclset_ = new ::std::string;
  }
  return serialized_aclset_;
}
inline ::std::string* SignedACLSet::release_serialized_aclset() {
  clear_has_serialized_aclset();
  if (serialized_aclset_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serialized_aclset_;
    serialized_aclset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignedACLSet::set_allocated_serialized_aclset(::std::string* serialized_aclset) {
  if (serialized_aclset_ != &::google::protobuf::internal::kEmptyString) {
    delete serialized_aclset_;
  }
  if (serialized_aclset) {
    set_has_serialized_aclset();
    serialized_aclset_ = serialized_aclset;
  } else {
    clear_has_serialized_aclset();
    serialized_aclset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes signature = 2;
inline bool SignedACLSet::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignedACLSet::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignedACLSet::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignedACLSet::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& SignedACLSet::signature() const {
  return *signature_;
}
inline void SignedACLSet::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void SignedACLSet::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void SignedACLSet::set_signature(const void* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignedACLSet::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* SignedACLSet::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignedACLSet::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tao

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_acl_5fguard_2eproto__INCLUDED
