// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datalog_guard.proto

#ifndef PROTOBUF_datalog_5fguard_2eproto__INCLUDED
#define PROTOBUF_datalog_5fguard_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tao {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_datalog_5fguard_2eproto();
void protobuf_AssignDesc_datalog_5fguard_2eproto();
void protobuf_ShutdownFile_datalog_5fguard_2eproto();

class DatalogRules;
class SignedDatalogRules;

// ===================================================================

class DatalogRules : public ::google::protobuf::Message {
 public:
  DatalogRules();
  virtual ~DatalogRules();

  DatalogRules(const DatalogRules& from);

  inline DatalogRules& operator=(const DatalogRules& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DatalogRules& default_instance();

  void Swap(DatalogRules* other);

  // implements Message ----------------------------------------------

  DatalogRules* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DatalogRules& from);
  void MergeFrom(const DatalogRules& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes rules = 1;
  inline int rules_size() const;
  inline void clear_rules();
  static const int kRulesFieldNumber = 1;
  inline const ::std::string& rules(int index) const;
  inline ::std::string* mutable_rules(int index);
  inline void set_rules(int index, const ::std::string& value);
  inline void set_rules(int index, const char* value);
  inline void set_rules(int index, const void* value, size_t size);
  inline ::std::string* add_rules();
  inline void add_rules(const ::std::string& value);
  inline void add_rules(const char* value);
  inline void add_rules(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& rules() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_rules();

  // @@protoc_insertion_point(class_scope:tao.DatalogRules)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> rules_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_datalog_5fguard_2eproto();
  friend void protobuf_AssignDesc_datalog_5fguard_2eproto();
  friend void protobuf_ShutdownFile_datalog_5fguard_2eproto();

  void InitAsDefaultInstance();
  static DatalogRules* default_instance_;
};
// -------------------------------------------------------------------

class SignedDatalogRules : public ::google::protobuf::Message {
 public:
  SignedDatalogRules();
  virtual ~SignedDatalogRules();

  SignedDatalogRules(const SignedDatalogRules& from);

  inline SignedDatalogRules& operator=(const SignedDatalogRules& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignedDatalogRules& default_instance();

  void Swap(SignedDatalogRules* other);

  // implements Message ----------------------------------------------

  SignedDatalogRules* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignedDatalogRules& from);
  void MergeFrom(const SignedDatalogRules& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes serialized_rules = 1;
  inline bool has_serialized_rules() const;
  inline void clear_serialized_rules();
  static const int kSerializedRulesFieldNumber = 1;
  inline const ::std::string& serialized_rules() const;
  inline void set_serialized_rules(const ::std::string& value);
  inline void set_serialized_rules(const char* value);
  inline void set_serialized_rules(const void* value, size_t size);
  inline ::std::string* mutable_serialized_rules();
  inline ::std::string* release_serialized_rules();
  inline void set_allocated_serialized_rules(::std::string* serialized_rules);

  // required bytes signature = 2;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 2;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const void* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:tao.SignedDatalogRules)
 private:
  inline void set_has_serialized_rules();
  inline void clear_has_serialized_rules();
  inline void set_has_signature();
  inline void clear_has_signature();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* serialized_rules_;
  ::std::string* signature_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_datalog_5fguard_2eproto();
  friend void protobuf_AssignDesc_datalog_5fguard_2eproto();
  friend void protobuf_ShutdownFile_datalog_5fguard_2eproto();

  void InitAsDefaultInstance();
  static SignedDatalogRules* default_instance_;
};
// ===================================================================


// ===================================================================

// DatalogRules

// repeated bytes rules = 1;
inline int DatalogRules::rules_size() const {
  return rules_.size();
}
inline void DatalogRules::clear_rules() {
  rules_.Clear();
}
inline const ::std::string& DatalogRules::rules(int index) const {
  return rules_.Get(index);
}
inline ::std::string* DatalogRules::mutable_rules(int index) {
  return rules_.Mutable(index);
}
inline void DatalogRules::set_rules(int index, const ::std::string& value) {
  rules_.Mutable(index)->assign(value);
}
inline void DatalogRules::set_rules(int index, const char* value) {
  rules_.Mutable(index)->assign(value);
}
inline void DatalogRules::set_rules(int index, const void* value, size_t size) {
  rules_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DatalogRules::add_rules() {
  return rules_.Add();
}
inline void DatalogRules::add_rules(const ::std::string& value) {
  rules_.Add()->assign(value);
}
inline void DatalogRules::add_rules(const char* value) {
  rules_.Add()->assign(value);
}
inline void DatalogRules::add_rules(const void* value, size_t size) {
  rules_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DatalogRules::rules() const {
  return rules_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DatalogRules::mutable_rules() {
  return &rules_;
}

// -------------------------------------------------------------------

// SignedDatalogRules

// required bytes serialized_rules = 1;
inline bool SignedDatalogRules::has_serialized_rules() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignedDatalogRules::set_has_serialized_rules() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignedDatalogRules::clear_has_serialized_rules() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignedDatalogRules::clear_serialized_rules() {
  if (serialized_rules_ != &::google::protobuf::internal::kEmptyString) {
    serialized_rules_->clear();
  }
  clear_has_serialized_rules();
}
inline const ::std::string& SignedDatalogRules::serialized_rules() const {
  return *serialized_rules_;
}
inline void SignedDatalogRules::set_serialized_rules(const ::std::string& value) {
  set_has_serialized_rules();
  if (serialized_rules_ == &::google::protobuf::internal::kEmptyString) {
    serialized_rules_ = new ::std::string;
  }
  serialized_rules_->assign(value);
}
inline void SignedDatalogRules::set_serialized_rules(const char* value) {
  set_has_serialized_rules();
  if (serialized_rules_ == &::google::protobuf::internal::kEmptyString) {
    serialized_rules_ = new ::std::string;
  }
  serialized_rules_->assign(value);
}
inline void SignedDatalogRules::set_serialized_rules(const void* value, size_t size) {
  set_has_serialized_rules();
  if (serialized_rules_ == &::google::protobuf::internal::kEmptyString) {
    serialized_rules_ = new ::std::string;
  }
  serialized_rules_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignedDatalogRules::mutable_serialized_rules() {
  set_has_serialized_rules();
  if (serialized_rules_ == &::google::protobuf::internal::kEmptyString) {
    serialized_rules_ = new ::std::string;
  }
  return serialized_rules_;
}
inline ::std::string* SignedDatalogRules::release_serialized_rules() {
  clear_has_serialized_rules();
  if (serialized_rules_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serialized_rules_;
    serialized_rules_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignedDatalogRules::set_allocated_serialized_rules(::std::string* serialized_rules) {
  if (serialized_rules_ != &::google::protobuf::internal::kEmptyString) {
    delete serialized_rules_;
  }
  if (serialized_rules) {
    set_has_serialized_rules();
    serialized_rules_ = serialized_rules;
  } else {
    clear_has_serialized_rules();
    serialized_rules_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes signature = 2;
inline bool SignedDatalogRules::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignedDatalogRules::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignedDatalogRules::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignedDatalogRules::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& SignedDatalogRules::signature() const {
  return *signature_;
}
inline void SignedDatalogRules::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void SignedDatalogRules::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void SignedDatalogRules::set_signature(const void* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignedDatalogRules::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* SignedDatalogRules::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignedDatalogRules::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tao

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_datalog_5fguard_2eproto__INCLUDED
