// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: attestation.proto

#ifndef PROTOBUF_attestation_2eproto__INCLUDED
#define PROTOBUF_attestation_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace tao {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_attestation_2eproto();
void protobuf_AssignDesc_attestation_2eproto();
void protobuf_ShutdownFile_attestation_2eproto();

class Attestation;

// ===================================================================

class Attestation : public ::google::protobuf::Message {
 public:
  Attestation();
  virtual ~Attestation();

  Attestation(const Attestation& from);

  inline Attestation& operator=(const Attestation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Attestation& default_instance();

  void Swap(Attestation* other);

  // implements Message ----------------------------------------------

  Attestation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Attestation& from);
  void MergeFrom(const Attestation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes serialized_statement = 1;
  inline bool has_serialized_statement() const;
  inline void clear_serialized_statement();
  static const int kSerializedStatementFieldNumber = 1;
  inline const ::std::string& serialized_statement() const;
  inline void set_serialized_statement(const ::std::string& value);
  inline void set_serialized_statement(const char* value);
  inline void set_serialized_statement(const void* value, size_t size);
  inline ::std::string* mutable_serialized_statement();
  inline ::std::string* release_serialized_statement();
  inline void set_allocated_serialized_statement(::std::string* serialized_statement);

  // required bytes signer = 2;
  inline bool has_signer() const;
  inline void clear_signer();
  static const int kSignerFieldNumber = 2;
  inline const ::std::string& signer() const;
  inline void set_signer(const ::std::string& value);
  inline void set_signer(const char* value);
  inline void set_signer(const void* value, size_t size);
  inline ::std::string* mutable_signer();
  inline ::std::string* release_signer();
  inline void set_allocated_signer(::std::string* signer);

  // required bytes signature = 3;
  inline bool has_signature() const;
  inline void clear_signature();
  static const int kSignatureFieldNumber = 3;
  inline const ::std::string& signature() const;
  inline void set_signature(const ::std::string& value);
  inline void set_signature(const char* value);
  inline void set_signature(const void* value, size_t size);
  inline ::std::string* mutable_signature();
  inline ::std::string* release_signature();
  inline void set_allocated_signature(::std::string* signature);

  // optional bytes serialized_delegation = 4;
  inline bool has_serialized_delegation() const;
  inline void clear_serialized_delegation();
  static const int kSerializedDelegationFieldNumber = 4;
  inline const ::std::string& serialized_delegation() const;
  inline void set_serialized_delegation(const ::std::string& value);
  inline void set_serialized_delegation(const char* value);
  inline void set_serialized_delegation(const void* value, size_t size);
  inline ::std::string* mutable_serialized_delegation();
  inline ::std::string* release_serialized_delegation();
  inline void set_allocated_serialized_delegation(::std::string* serialized_delegation);

  // repeated bytes serialized_endorsements = 5;
  inline int serialized_endorsements_size() const;
  inline void clear_serialized_endorsements();
  static const int kSerializedEndorsementsFieldNumber = 5;
  inline const ::std::string& serialized_endorsements(int index) const;
  inline ::std::string* mutable_serialized_endorsements(int index);
  inline void set_serialized_endorsements(int index, const ::std::string& value);
  inline void set_serialized_endorsements(int index, const char* value);
  inline void set_serialized_endorsements(int index, const void* value, size_t size);
  inline ::std::string* add_serialized_endorsements();
  inline void add_serialized_endorsements(const ::std::string& value);
  inline void add_serialized_endorsements(const char* value);
  inline void add_serialized_endorsements(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& serialized_endorsements() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_serialized_endorsements();

  // optional bytes tpm2_quote_structure = 6;
  inline bool has_tpm2_quote_structure() const;
  inline void clear_tpm2_quote_structure();
  static const int kTpm2QuoteStructureFieldNumber = 6;
  inline const ::std::string& tpm2_quote_structure() const;
  inline void set_tpm2_quote_structure(const ::std::string& value);
  inline void set_tpm2_quote_structure(const char* value);
  inline void set_tpm2_quote_structure(const void* value, size_t size);
  inline ::std::string* mutable_tpm2_quote_structure();
  inline ::std::string* release_tpm2_quote_structure();
  inline void set_allocated_tpm2_quote_structure(::std::string* tpm2_quote_structure);

  // @@protoc_insertion_point(class_scope:tao.Attestation)
 private:
  inline void set_has_serialized_statement();
  inline void clear_has_serialized_statement();
  inline void set_has_signer();
  inline void clear_has_signer();
  inline void set_has_signature();
  inline void clear_has_signature();
  inline void set_has_serialized_delegation();
  inline void clear_has_serialized_delegation();
  inline void set_has_tpm2_quote_structure();
  inline void clear_has_tpm2_quote_structure();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* serialized_statement_;
  ::std::string* signer_;
  ::std::string* signature_;
  ::std::string* serialized_delegation_;
  ::google::protobuf::RepeatedPtrField< ::std::string> serialized_endorsements_;
  ::std::string* tpm2_quote_structure_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_attestation_2eproto();
  friend void protobuf_AssignDesc_attestation_2eproto();
  friend void protobuf_ShutdownFile_attestation_2eproto();

  void InitAsDefaultInstance();
  static Attestation* default_instance_;
};
// ===================================================================


// ===================================================================

// Attestation

// required bytes serialized_statement = 1;
inline bool Attestation::has_serialized_statement() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Attestation::set_has_serialized_statement() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Attestation::clear_has_serialized_statement() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Attestation::clear_serialized_statement() {
  if (serialized_statement_ != &::google::protobuf::internal::kEmptyString) {
    serialized_statement_->clear();
  }
  clear_has_serialized_statement();
}
inline const ::std::string& Attestation::serialized_statement() const {
  return *serialized_statement_;
}
inline void Attestation::set_serialized_statement(const ::std::string& value) {
  set_has_serialized_statement();
  if (serialized_statement_ == &::google::protobuf::internal::kEmptyString) {
    serialized_statement_ = new ::std::string;
  }
  serialized_statement_->assign(value);
}
inline void Attestation::set_serialized_statement(const char* value) {
  set_has_serialized_statement();
  if (serialized_statement_ == &::google::protobuf::internal::kEmptyString) {
    serialized_statement_ = new ::std::string;
  }
  serialized_statement_->assign(value);
}
inline void Attestation::set_serialized_statement(const void* value, size_t size) {
  set_has_serialized_statement();
  if (serialized_statement_ == &::google::protobuf::internal::kEmptyString) {
    serialized_statement_ = new ::std::string;
  }
  serialized_statement_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Attestation::mutable_serialized_statement() {
  set_has_serialized_statement();
  if (serialized_statement_ == &::google::protobuf::internal::kEmptyString) {
    serialized_statement_ = new ::std::string;
  }
  return serialized_statement_;
}
inline ::std::string* Attestation::release_serialized_statement() {
  clear_has_serialized_statement();
  if (serialized_statement_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serialized_statement_;
    serialized_statement_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Attestation::set_allocated_serialized_statement(::std::string* serialized_statement) {
  if (serialized_statement_ != &::google::protobuf::internal::kEmptyString) {
    delete serialized_statement_;
  }
  if (serialized_statement) {
    set_has_serialized_statement();
    serialized_statement_ = serialized_statement;
  } else {
    clear_has_serialized_statement();
    serialized_statement_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes signer = 2;
inline bool Attestation::has_signer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Attestation::set_has_signer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Attestation::clear_has_signer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Attestation::clear_signer() {
  if (signer_ != &::google::protobuf::internal::kEmptyString) {
    signer_->clear();
  }
  clear_has_signer();
}
inline const ::std::string& Attestation::signer() const {
  return *signer_;
}
inline void Attestation::set_signer(const ::std::string& value) {
  set_has_signer();
  if (signer_ == &::google::protobuf::internal::kEmptyString) {
    signer_ = new ::std::string;
  }
  signer_->assign(value);
}
inline void Attestation::set_signer(const char* value) {
  set_has_signer();
  if (signer_ == &::google::protobuf::internal::kEmptyString) {
    signer_ = new ::std::string;
  }
  signer_->assign(value);
}
inline void Attestation::set_signer(const void* value, size_t size) {
  set_has_signer();
  if (signer_ == &::google::protobuf::internal::kEmptyString) {
    signer_ = new ::std::string;
  }
  signer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Attestation::mutable_signer() {
  set_has_signer();
  if (signer_ == &::google::protobuf::internal::kEmptyString) {
    signer_ = new ::std::string;
  }
  return signer_;
}
inline ::std::string* Attestation::release_signer() {
  clear_has_signer();
  if (signer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signer_;
    signer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Attestation::set_allocated_signer(::std::string* signer) {
  if (signer_ != &::google::protobuf::internal::kEmptyString) {
    delete signer_;
  }
  if (signer) {
    set_has_signer();
    signer_ = signer;
  } else {
    clear_has_signer();
    signer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes signature = 3;
inline bool Attestation::has_signature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Attestation::set_has_signature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Attestation::clear_has_signature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Attestation::clear_signature() {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    signature_->clear();
  }
  clear_has_signature();
}
inline const ::std::string& Attestation::signature() const {
  return *signature_;
}
inline void Attestation::set_signature(const ::std::string& value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void Attestation::set_signature(const char* value) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(value);
}
inline void Attestation::set_signature(const void* value, size_t size) {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  signature_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Attestation::mutable_signature() {
  set_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    signature_ = new ::std::string;
  }
  return signature_;
}
inline ::std::string* Attestation::release_signature() {
  clear_has_signature();
  if (signature_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = signature_;
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Attestation::set_allocated_signature(::std::string* signature) {
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (signature) {
    set_has_signature();
    signature_ = signature;
  } else {
    clear_has_signature();
    signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes serialized_delegation = 4;
inline bool Attestation::has_serialized_delegation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Attestation::set_has_serialized_delegation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Attestation::clear_has_serialized_delegation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Attestation::clear_serialized_delegation() {
  if (serialized_delegation_ != &::google::protobuf::internal::kEmptyString) {
    serialized_delegation_->clear();
  }
  clear_has_serialized_delegation();
}
inline const ::std::string& Attestation::serialized_delegation() const {
  return *serialized_delegation_;
}
inline void Attestation::set_serialized_delegation(const ::std::string& value) {
  set_has_serialized_delegation();
  if (serialized_delegation_ == &::google::protobuf::internal::kEmptyString) {
    serialized_delegation_ = new ::std::string;
  }
  serialized_delegation_->assign(value);
}
inline void Attestation::set_serialized_delegation(const char* value) {
  set_has_serialized_delegation();
  if (serialized_delegation_ == &::google::protobuf::internal::kEmptyString) {
    serialized_delegation_ = new ::std::string;
  }
  serialized_delegation_->assign(value);
}
inline void Attestation::set_serialized_delegation(const void* value, size_t size) {
  set_has_serialized_delegation();
  if (serialized_delegation_ == &::google::protobuf::internal::kEmptyString) {
    serialized_delegation_ = new ::std::string;
  }
  serialized_delegation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Attestation::mutable_serialized_delegation() {
  set_has_serialized_delegation();
  if (serialized_delegation_ == &::google::protobuf::internal::kEmptyString) {
    serialized_delegation_ = new ::std::string;
  }
  return serialized_delegation_;
}
inline ::std::string* Attestation::release_serialized_delegation() {
  clear_has_serialized_delegation();
  if (serialized_delegation_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = serialized_delegation_;
    serialized_delegation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Attestation::set_allocated_serialized_delegation(::std::string* serialized_delegation) {
  if (serialized_delegation_ != &::google::protobuf::internal::kEmptyString) {
    delete serialized_delegation_;
  }
  if (serialized_delegation) {
    set_has_serialized_delegation();
    serialized_delegation_ = serialized_delegation;
  } else {
    clear_has_serialized_delegation();
    serialized_delegation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated bytes serialized_endorsements = 5;
inline int Attestation::serialized_endorsements_size() const {
  return serialized_endorsements_.size();
}
inline void Attestation::clear_serialized_endorsements() {
  serialized_endorsements_.Clear();
}
inline const ::std::string& Attestation::serialized_endorsements(int index) const {
  return serialized_endorsements_.Get(index);
}
inline ::std::string* Attestation::mutable_serialized_endorsements(int index) {
  return serialized_endorsements_.Mutable(index);
}
inline void Attestation::set_serialized_endorsements(int index, const ::std::string& value) {
  serialized_endorsements_.Mutable(index)->assign(value);
}
inline void Attestation::set_serialized_endorsements(int index, const char* value) {
  serialized_endorsements_.Mutable(index)->assign(value);
}
inline void Attestation::set_serialized_endorsements(int index, const void* value, size_t size) {
  serialized_endorsements_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Attestation::add_serialized_endorsements() {
  return serialized_endorsements_.Add();
}
inline void Attestation::add_serialized_endorsements(const ::std::string& value) {
  serialized_endorsements_.Add()->assign(value);
}
inline void Attestation::add_serialized_endorsements(const char* value) {
  serialized_endorsements_.Add()->assign(value);
}
inline void Attestation::add_serialized_endorsements(const void* value, size_t size) {
  serialized_endorsements_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Attestation::serialized_endorsements() const {
  return serialized_endorsements_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Attestation::mutable_serialized_endorsements() {
  return &serialized_endorsements_;
}

// optional bytes tpm2_quote_structure = 6;
inline bool Attestation::has_tpm2_quote_structure() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Attestation::set_has_tpm2_quote_structure() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Attestation::clear_has_tpm2_quote_structure() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Attestation::clear_tpm2_quote_structure() {
  if (tpm2_quote_structure_ != &::google::protobuf::internal::kEmptyString) {
    tpm2_quote_structure_->clear();
  }
  clear_has_tpm2_quote_structure();
}
inline const ::std::string& Attestation::tpm2_quote_structure() const {
  return *tpm2_quote_structure_;
}
inline void Attestation::set_tpm2_quote_structure(const ::std::string& value) {
  set_has_tpm2_quote_structure();
  if (tpm2_quote_structure_ == &::google::protobuf::internal::kEmptyString) {
    tpm2_quote_structure_ = new ::std::string;
  }
  tpm2_quote_structure_->assign(value);
}
inline void Attestation::set_tpm2_quote_structure(const char* value) {
  set_has_tpm2_quote_structure();
  if (tpm2_quote_structure_ == &::google::protobuf::internal::kEmptyString) {
    tpm2_quote_structure_ = new ::std::string;
  }
  tpm2_quote_structure_->assign(value);
}
inline void Attestation::set_tpm2_quote_structure(const void* value, size_t size) {
  set_has_tpm2_quote_structure();
  if (tpm2_quote_structure_ == &::google::protobuf::internal::kEmptyString) {
    tpm2_quote_structure_ = new ::std::string;
  }
  tpm2_quote_structure_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Attestation::mutable_tpm2_quote_structure() {
  set_has_tpm2_quote_structure();
  if (tpm2_quote_structure_ == &::google::protobuf::internal::kEmptyString) {
    tpm2_quote_structure_ = new ::std::string;
  }
  return tpm2_quote_structure_;
}
inline ::std::string* Attestation::release_tpm2_quote_structure() {
  clear_has_tpm2_quote_structure();
  if (tpm2_quote_structure_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tpm2_quote_structure_;
    tpm2_quote_structure_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Attestation::set_allocated_tpm2_quote_structure(::std::string* tpm2_quote_structure) {
  if (tpm2_quote_structure_ != &::google::protobuf::internal::kEmptyString) {
    delete tpm2_quote_structure_;
  }
  if (tpm2_quote_structure) {
    set_has_tpm2_quote_structure();
    tpm2_quote_structure_ = tpm2_quote_structure;
  } else {
    clear_has_tpm2_quote_structure();
    tpm2_quote_structure_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tao

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_attestation_2eproto__INCLUDED
