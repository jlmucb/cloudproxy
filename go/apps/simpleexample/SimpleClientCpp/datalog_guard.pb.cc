// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datalog_guard.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "datalog_guard.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tao {

namespace {

const ::google::protobuf::Descriptor* DatalogRules_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DatalogRules_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignedDatalogRules_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignedDatalogRules_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_datalog_5fguard_2eproto() {
  protobuf_AddDesc_datalog_5fguard_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "datalog_guard.proto");
  GOOGLE_CHECK(file != NULL);
  DatalogRules_descriptor_ = file->message_type(0);
  static const int DatalogRules_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatalogRules, rules_),
  };
  DatalogRules_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DatalogRules_descriptor_,
      DatalogRules::default_instance_,
      DatalogRules_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatalogRules, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatalogRules, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DatalogRules));
  SignedDatalogRules_descriptor_ = file->message_type(1);
  static const int SignedDatalogRules_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedDatalogRules, serialized_rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedDatalogRules, signature_),
  };
  SignedDatalogRules_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignedDatalogRules_descriptor_,
      SignedDatalogRules::default_instance_,
      SignedDatalogRules_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedDatalogRules, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedDatalogRules, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignedDatalogRules));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_datalog_5fguard_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DatalogRules_descriptor_, &DatalogRules::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignedDatalogRules_descriptor_, &SignedDatalogRules::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_datalog_5fguard_2eproto() {
  delete DatalogRules::default_instance_;
  delete DatalogRules_reflection_;
  delete SignedDatalogRules::default_instance_;
  delete SignedDatalogRules_reflection_;
}

void protobuf_AddDesc_datalog_5fguard_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023datalog_guard.proto\022\003tao\"\035\n\014DatalogRul"
    "es\022\r\n\005rules\030\001 \003(\014\"A\n\022SignedDatalogRules\022"
    "\030\n\020serialized_rules\030\001 \002(\014\022\021\n\tsignature\030\002"
    " \002(\014", 124);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "datalog_guard.proto", &protobuf_RegisterTypes);
  DatalogRules::default_instance_ = new DatalogRules();
  SignedDatalogRules::default_instance_ = new SignedDatalogRules();
  DatalogRules::default_instance_->InitAsDefaultInstance();
  SignedDatalogRules::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_datalog_5fguard_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_datalog_5fguard_2eproto {
  StaticDescriptorInitializer_datalog_5fguard_2eproto() {
    protobuf_AddDesc_datalog_5fguard_2eproto();
  }
} static_descriptor_initializer_datalog_5fguard_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DatalogRules::kRulesFieldNumber;
#endif  // !_MSC_VER

DatalogRules::DatalogRules()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DatalogRules::InitAsDefaultInstance() {
}

DatalogRules::DatalogRules(const DatalogRules& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DatalogRules::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DatalogRules::~DatalogRules() {
  SharedDtor();
}

void DatalogRules::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DatalogRules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatalogRules::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DatalogRules_descriptor_;
}

const DatalogRules& DatalogRules::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datalog_5fguard_2eproto();
  return *default_instance_;
}

DatalogRules* DatalogRules::default_instance_ = NULL;

DatalogRules* DatalogRules::New() const {
  return new DatalogRules;
}

void DatalogRules::Clear() {
  rules_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DatalogRules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes rules = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rules;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DatalogRules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes rules = 1;
  for (int i = 0; i < this->rules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->rules(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DatalogRules::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes rules = 1;
  for (int i = 0; i < this->rules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->rules(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DatalogRules::ByteSize() const {
  int total_size = 0;

  // repeated bytes rules = 1;
  total_size += 1 * this->rules_size();
  for (int i = 0; i < this->rules_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->rules(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatalogRules::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DatalogRules* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DatalogRules*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DatalogRules::MergeFrom(const DatalogRules& from) {
  GOOGLE_CHECK_NE(&from, this);
  rules_.MergeFrom(from.rules_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DatalogRules::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatalogRules::CopyFrom(const DatalogRules& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatalogRules::IsInitialized() const {

  return true;
}

void DatalogRules::Swap(DatalogRules* other) {
  if (other != this) {
    rules_.Swap(&other->rules_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DatalogRules::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DatalogRules_descriptor_;
  metadata.reflection = DatalogRules_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignedDatalogRules::kSerializedRulesFieldNumber;
const int SignedDatalogRules::kSignatureFieldNumber;
#endif  // !_MSC_VER

SignedDatalogRules::SignedDatalogRules()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignedDatalogRules::InitAsDefaultInstance() {
}

SignedDatalogRules::SignedDatalogRules(const SignedDatalogRules& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignedDatalogRules::SharedCtor() {
  _cached_size_ = 0;
  serialized_rules_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignedDatalogRules::~SignedDatalogRules() {
  SharedDtor();
}

void SignedDatalogRules::SharedDtor() {
  if (serialized_rules_ != &::google::protobuf::internal::kEmptyString) {
    delete serialized_rules_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void SignedDatalogRules::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignedDatalogRules::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignedDatalogRules_descriptor_;
}

const SignedDatalogRules& SignedDatalogRules::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_datalog_5fguard_2eproto();
  return *default_instance_;
}

SignedDatalogRules* SignedDatalogRules::default_instance_ = NULL;

SignedDatalogRules* SignedDatalogRules::New() const {
  return new SignedDatalogRules;
}

void SignedDatalogRules::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_serialized_rules()) {
      if (serialized_rules_ != &::google::protobuf::internal::kEmptyString) {
        serialized_rules_->clear();
      }
    }
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignedDatalogRules::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes serialized_rules = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_signature;
        break;
      }

      // required bytes signature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignedDatalogRules::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes serialized_rules = 1;
  if (has_serialized_rules()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->serialized_rules(), output);
  }

  // required bytes signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->signature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignedDatalogRules::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes serialized_rules = 1;
  if (has_serialized_rules()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->serialized_rules(), target);
  }

  // required bytes signature = 2;
  if (has_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->signature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignedDatalogRules::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes serialized_rules = 1;
    if (has_serialized_rules()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_rules());
    }

    // required bytes signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignedDatalogRules::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignedDatalogRules* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignedDatalogRules*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignedDatalogRules::MergeFrom(const SignedDatalogRules& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialized_rules()) {
      set_serialized_rules(from.serialized_rules());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignedDatalogRules::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedDatalogRules::CopyFrom(const SignedDatalogRules& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedDatalogRules::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SignedDatalogRules::Swap(SignedDatalogRules* other) {
  if (other != this) {
    std::swap(serialized_rules_, other->serialized_rules_);
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignedDatalogRules::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignedDatalogRules_descriptor_;
  metadata.reflection = SignedDatalogRules_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tao

// @@protoc_insertion_point(global_scope)
