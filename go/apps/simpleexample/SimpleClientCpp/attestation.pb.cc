// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: attestation.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "attestation.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tao {

namespace {

const ::google::protobuf::Descriptor* Attestation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attestation_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_attestation_2eproto() {
  protobuf_AddDesc_attestation_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "attestation.proto");
  GOOGLE_CHECK(file != NULL);
  Attestation_descriptor_ = file->message_type(0);
  static const int Attestation_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attestation, serialized_statement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attestation, signer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attestation, signature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attestation, serialized_delegation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attestation, serialized_endorsements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attestation, tpm2_quote_structure_),
  };
  Attestation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attestation_descriptor_,
      Attestation::default_instance_,
      Attestation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attestation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attestation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attestation));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_attestation_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attestation_descriptor_, &Attestation::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_attestation_2eproto() {
  delete Attestation::default_instance_;
  delete Attestation_reflection_;
}

void protobuf_AddDesc_attestation_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021attestation.proto\022\003tao\"\254\001\n\013Attestation"
    "\022\034\n\024serialized_statement\030\001 \002(\014\022\016\n\006signer"
    "\030\002 \002(\014\022\021\n\tsignature\030\003 \002(\014\022\035\n\025serialized_"
    "delegation\030\004 \001(\014\022\037\n\027serialized_endorseme"
    "nts\030\005 \003(\014\022\034\n\024tpm2_quote_structure\030\006 \001(\014", 199);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "attestation.proto", &protobuf_RegisterTypes);
  Attestation::default_instance_ = new Attestation();
  Attestation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_attestation_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_attestation_2eproto {
  StaticDescriptorInitializer_attestation_2eproto() {
    protobuf_AddDesc_attestation_2eproto();
  }
} static_descriptor_initializer_attestation_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Attestation::kSerializedStatementFieldNumber;
const int Attestation::kSignerFieldNumber;
const int Attestation::kSignatureFieldNumber;
const int Attestation::kSerializedDelegationFieldNumber;
const int Attestation::kSerializedEndorsementsFieldNumber;
const int Attestation::kTpm2QuoteStructureFieldNumber;
#endif  // !_MSC_VER

Attestation::Attestation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attestation::InitAsDefaultInstance() {
}

Attestation::Attestation(const Attestation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attestation::SharedCtor() {
  _cached_size_ = 0;
  serialized_statement_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serialized_delegation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tpm2_quote_structure_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attestation::~Attestation() {
  SharedDtor();
}

void Attestation::SharedDtor() {
  if (serialized_statement_ != &::google::protobuf::internal::kEmptyString) {
    delete serialized_statement_;
  }
  if (signer_ != &::google::protobuf::internal::kEmptyString) {
    delete signer_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (serialized_delegation_ != &::google::protobuf::internal::kEmptyString) {
    delete serialized_delegation_;
  }
  if (tpm2_quote_structure_ != &::google::protobuf::internal::kEmptyString) {
    delete tpm2_quote_structure_;
  }
  if (this != default_instance_) {
  }
}

void Attestation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attestation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attestation_descriptor_;
}

const Attestation& Attestation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_attestation_2eproto();
  return *default_instance_;
}

Attestation* Attestation::default_instance_ = NULL;

Attestation* Attestation::New() const {
  return new Attestation;
}

void Attestation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_serialized_statement()) {
      if (serialized_statement_ != &::google::protobuf::internal::kEmptyString) {
        serialized_statement_->clear();
      }
    }
    if (has_signer()) {
      if (signer_ != &::google::protobuf::internal::kEmptyString) {
        signer_->clear();
      }
    }
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
    if (has_serialized_delegation()) {
      if (serialized_delegation_ != &::google::protobuf::internal::kEmptyString) {
        serialized_delegation_->clear();
      }
    }
    if (has_tpm2_quote_structure()) {
      if (tpm2_quote_structure_ != &::google::protobuf::internal::kEmptyString) {
        tpm2_quote_structure_->clear();
      }
    }
  }
  serialized_endorsements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attestation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes serialized_statement = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_statement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_signer;
        break;
      }

      // required bytes signer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_signature;
        break;
      }

      // required bytes signature = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_serialized_delegation;
        break;
      }

      // optional bytes serialized_delegation = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serialized_delegation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_delegation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_serialized_endorsements;
        break;
      }

      // repeated bytes serialized_endorsements = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serialized_endorsements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_serialized_endorsements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_serialized_endorsements;
        if (input->ExpectTag(50)) goto parse_tpm2_quote_structure;
        break;
      }

      // optional bytes tpm2_quote_structure = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tpm2_quote_structure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tpm2_quote_structure()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attestation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes serialized_statement = 1;
  if (has_serialized_statement()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->serialized_statement(), output);
  }

  // required bytes signer = 2;
  if (has_signer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->signer(), output);
  }

  // required bytes signature = 3;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->signature(), output);
  }

  // optional bytes serialized_delegation = 4;
  if (has_serialized_delegation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->serialized_delegation(), output);
  }

  // repeated bytes serialized_endorsements = 5;
  for (int i = 0; i < this->serialized_endorsements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->serialized_endorsements(i), output);
  }

  // optional bytes tpm2_quote_structure = 6;
  if (has_tpm2_quote_structure()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->tpm2_quote_structure(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attestation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes serialized_statement = 1;
  if (has_serialized_statement()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->serialized_statement(), target);
  }

  // required bytes signer = 2;
  if (has_signer()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->signer(), target);
  }

  // required bytes signature = 3;
  if (has_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->signature(), target);
  }

  // optional bytes serialized_delegation = 4;
  if (has_serialized_delegation()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->serialized_delegation(), target);
  }

  // repeated bytes serialized_endorsements = 5;
  for (int i = 0; i < this->serialized_endorsements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(5, this->serialized_endorsements(i), target);
  }

  // optional bytes tpm2_quote_structure = 6;
  if (has_tpm2_quote_structure()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->tpm2_quote_structure(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attestation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes serialized_statement = 1;
    if (has_serialized_statement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_statement());
    }

    // required bytes signer = 2;
    if (has_signer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signer());
    }

    // required bytes signature = 3;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

    // optional bytes serialized_delegation = 4;
    if (has_serialized_delegation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_delegation());
    }

    // optional bytes tpm2_quote_structure = 6;
    if (has_tpm2_quote_structure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tpm2_quote_structure());
    }

  }
  // repeated bytes serialized_endorsements = 5;
  total_size += 1 * this->serialized_endorsements_size();
  for (int i = 0; i < this->serialized_endorsements_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->serialized_endorsements(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attestation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attestation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attestation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attestation::MergeFrom(const Attestation& from) {
  GOOGLE_CHECK_NE(&from, this);
  serialized_endorsements_.MergeFrom(from.serialized_endorsements_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialized_statement()) {
      set_serialized_statement(from.serialized_statement());
    }
    if (from.has_signer()) {
      set_signer(from.signer());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
    if (from.has_serialized_delegation()) {
      set_serialized_delegation(from.serialized_delegation());
    }
    if (from.has_tpm2_quote_structure()) {
      set_tpm2_quote_structure(from.tpm2_quote_structure());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attestation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attestation::CopyFrom(const Attestation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attestation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Attestation::Swap(Attestation* other) {
  if (other != this) {
    std::swap(serialized_statement_, other->serialized_statement_);
    std::swap(signer_, other->signer_);
    std::swap(signature_, other->signature_);
    std::swap(serialized_delegation_, other->serialized_delegation_);
    serialized_endorsements_.Swap(&other->serialized_endorsements_);
    std::swap(tpm2_quote_structure_, other->tpm2_quote_structure_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attestation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attestation_descriptor_;
  metadata.reflection = Attestation_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tao

// @@protoc_insertion_point(global_scope)
