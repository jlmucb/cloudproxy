// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ca.proto

#ifndef PROTOBUF_ca_2eproto__INCLUDED
#define PROTOBUF_ca_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "attestation.pb.h"
#include "datalog_guard.pb.h"
#include "acl_guard.pb.h"
// @@protoc_insertion_point(includes)

namespace tao {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ca_2eproto();
void protobuf_AssignDesc_ca_2eproto();
void protobuf_ShutdownFile_ca_2eproto();

class CARequest;
class CAResponse;

enum CAType {
  ERROR = 0,
  ATTESTATION = 1,
  DATALOG_POLICY = 2,
  ACL_POLICY = 3,
  UNDEFINED = 4
};
bool CAType_IsValid(int value);
const CAType CAType_MIN = ERROR;
const CAType CAType_MAX = UNDEFINED;
const int CAType_ARRAYSIZE = CAType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CAType_descriptor();
inline const ::std::string& CAType_Name(CAType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CAType_descriptor(), value);
}
inline bool CAType_Parse(
    const ::std::string& name, CAType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CAType>(
    CAType_descriptor(), name, value);
}
// ===================================================================

class CARequest : public ::google::protobuf::Message {
 public:
  CARequest();
  virtual ~CARequest();

  CARequest(const CARequest& from);

  inline CARequest& operator=(const CARequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CARequest& default_instance();

  void Swap(CARequest* other);

  // implements Message ----------------------------------------------

  CARequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CARequest& from);
  void MergeFrom(const CARequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .tao.CAType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::tao::CAType type() const;
  inline void set_type(::tao::CAType value);

  // optional .tao.Attestation attestation = 2;
  inline bool has_attestation() const;
  inline void clear_attestation();
  static const int kAttestationFieldNumber = 2;
  inline const ::tao::Attestation& attestation() const;
  inline ::tao::Attestation* mutable_attestation();
  inline ::tao::Attestation* release_attestation();
  inline void set_allocated_attestation(::tao::Attestation* attestation);

  // @@protoc_insertion_point(class_scope:tao.CARequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_attestation();
  inline void clear_has_attestation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::tao::Attestation* attestation_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ca_2eproto();
  friend void protobuf_AssignDesc_ca_2eproto();
  friend void protobuf_ShutdownFile_ca_2eproto();

  void InitAsDefaultInstance();
  static CARequest* default_instance_;
};
// -------------------------------------------------------------------

class CAResponse : public ::google::protobuf::Message {
 public:
  CAResponse();
  virtual ~CAResponse();

  CAResponse(const CAResponse& from);

  inline CAResponse& operator=(const CAResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CAResponse& default_instance();

  void Swap(CAResponse* other);

  // implements Message ----------------------------------------------

  CAResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CAResponse& from);
  void MergeFrom(const CAResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .tao.CAType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::tao::CAType type() const;
  inline void set_type(::tao::CAType value);

  // optional .tao.Attestation attestation = 2;
  inline bool has_attestation() const;
  inline void clear_attestation();
  static const int kAttestationFieldNumber = 2;
  inline const ::tao::Attestation& attestation() const;
  inline ::tao::Attestation* mutable_attestation();
  inline ::tao::Attestation* release_attestation();
  inline void set_allocated_attestation(::tao::Attestation* attestation);

  // optional .tao.SignedDatalogRules signed_datalog_rules = 3;
  inline bool has_signed_datalog_rules() const;
  inline void clear_signed_datalog_rules();
  static const int kSignedDatalogRulesFieldNumber = 3;
  inline const ::tao::SignedDatalogRules& signed_datalog_rules() const;
  inline ::tao::SignedDatalogRules* mutable_signed_datalog_rules();
  inline ::tao::SignedDatalogRules* release_signed_datalog_rules();
  inline void set_allocated_signed_datalog_rules(::tao::SignedDatalogRules* signed_datalog_rules);

  // optional .tao.SignedACLSet signed_acl_set = 4;
  inline bool has_signed_acl_set() const;
  inline void clear_signed_acl_set();
  static const int kSignedAclSetFieldNumber = 4;
  inline const ::tao::SignedACLSet& signed_acl_set() const;
  inline ::tao::SignedACLSet* mutable_signed_acl_set();
  inline ::tao::SignedACLSet* release_signed_acl_set();
  inline void set_allocated_signed_acl_set(::tao::SignedACLSet* signed_acl_set);

  // @@protoc_insertion_point(class_scope:tao.CAResponse)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_attestation();
  inline void clear_has_attestation();
  inline void set_has_signed_datalog_rules();
  inline void clear_has_signed_datalog_rules();
  inline void set_has_signed_acl_set();
  inline void clear_has_signed_acl_set();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::tao::Attestation* attestation_;
  ::tao::SignedDatalogRules* signed_datalog_rules_;
  ::tao::SignedACLSet* signed_acl_set_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_ca_2eproto();
  friend void protobuf_AssignDesc_ca_2eproto();
  friend void protobuf_ShutdownFile_ca_2eproto();

  void InitAsDefaultInstance();
  static CAResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// CARequest

// required .tao.CAType type = 1;
inline bool CARequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CARequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CARequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CARequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::tao::CAType CARequest::type() const {
  return static_cast< ::tao::CAType >(type_);
}
inline void CARequest::set_type(::tao::CAType value) {
  assert(::tao::CAType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .tao.Attestation attestation = 2;
inline bool CARequest::has_attestation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CARequest::set_has_attestation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CARequest::clear_has_attestation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CARequest::clear_attestation() {
  if (attestation_ != NULL) attestation_->::tao::Attestation::Clear();
  clear_has_attestation();
}
inline const ::tao::Attestation& CARequest::attestation() const {
  return attestation_ != NULL ? *attestation_ : *default_instance_->attestation_;
}
inline ::tao::Attestation* CARequest::mutable_attestation() {
  set_has_attestation();
  if (attestation_ == NULL) attestation_ = new ::tao::Attestation;
  return attestation_;
}
inline ::tao::Attestation* CARequest::release_attestation() {
  clear_has_attestation();
  ::tao::Attestation* temp = attestation_;
  attestation_ = NULL;
  return temp;
}
inline void CARequest::set_allocated_attestation(::tao::Attestation* attestation) {
  delete attestation_;
  attestation_ = attestation;
  if (attestation) {
    set_has_attestation();
  } else {
    clear_has_attestation();
  }
}

// -------------------------------------------------------------------

// CAResponse

// required .tao.CAType type = 1;
inline bool CAResponse::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CAResponse::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CAResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CAResponse::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::tao::CAType CAResponse::type() const {
  return static_cast< ::tao::CAType >(type_);
}
inline void CAResponse::set_type(::tao::CAType value) {
  assert(::tao::CAType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .tao.Attestation attestation = 2;
inline bool CAResponse::has_attestation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CAResponse::set_has_attestation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CAResponse::clear_has_attestation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CAResponse::clear_attestation() {
  if (attestation_ != NULL) attestation_->::tao::Attestation::Clear();
  clear_has_attestation();
}
inline const ::tao::Attestation& CAResponse::attestation() const {
  return attestation_ != NULL ? *attestation_ : *default_instance_->attestation_;
}
inline ::tao::Attestation* CAResponse::mutable_attestation() {
  set_has_attestation();
  if (attestation_ == NULL) attestation_ = new ::tao::Attestation;
  return attestation_;
}
inline ::tao::Attestation* CAResponse::release_attestation() {
  clear_has_attestation();
  ::tao::Attestation* temp = attestation_;
  attestation_ = NULL;
  return temp;
}
inline void CAResponse::set_allocated_attestation(::tao::Attestation* attestation) {
  delete attestation_;
  attestation_ = attestation;
  if (attestation) {
    set_has_attestation();
  } else {
    clear_has_attestation();
  }
}

// optional .tao.SignedDatalogRules signed_datalog_rules = 3;
inline bool CAResponse::has_signed_datalog_rules() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CAResponse::set_has_signed_datalog_rules() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CAResponse::clear_has_signed_datalog_rules() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CAResponse::clear_signed_datalog_rules() {
  if (signed_datalog_rules_ != NULL) signed_datalog_rules_->::tao::SignedDatalogRules::Clear();
  clear_has_signed_datalog_rules();
}
inline const ::tao::SignedDatalogRules& CAResponse::signed_datalog_rules() const {
  return signed_datalog_rules_ != NULL ? *signed_datalog_rules_ : *default_instance_->signed_datalog_rules_;
}
inline ::tao::SignedDatalogRules* CAResponse::mutable_signed_datalog_rules() {
  set_has_signed_datalog_rules();
  if (signed_datalog_rules_ == NULL) signed_datalog_rules_ = new ::tao::SignedDatalogRules;
  return signed_datalog_rules_;
}
inline ::tao::SignedDatalogRules* CAResponse::release_signed_datalog_rules() {
  clear_has_signed_datalog_rules();
  ::tao::SignedDatalogRules* temp = signed_datalog_rules_;
  signed_datalog_rules_ = NULL;
  return temp;
}
inline void CAResponse::set_allocated_signed_datalog_rules(::tao::SignedDatalogRules* signed_datalog_rules) {
  delete signed_datalog_rules_;
  signed_datalog_rules_ = signed_datalog_rules;
  if (signed_datalog_rules) {
    set_has_signed_datalog_rules();
  } else {
    clear_has_signed_datalog_rules();
  }
}

// optional .tao.SignedACLSet signed_acl_set = 4;
inline bool CAResponse::has_signed_acl_set() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CAResponse::set_has_signed_acl_set() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CAResponse::clear_has_signed_acl_set() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CAResponse::clear_signed_acl_set() {
  if (signed_acl_set_ != NULL) signed_acl_set_->::tao::SignedACLSet::Clear();
  clear_has_signed_acl_set();
}
inline const ::tao::SignedACLSet& CAResponse::signed_acl_set() const {
  return signed_acl_set_ != NULL ? *signed_acl_set_ : *default_instance_->signed_acl_set_;
}
inline ::tao::SignedACLSet* CAResponse::mutable_signed_acl_set() {
  set_has_signed_acl_set();
  if (signed_acl_set_ == NULL) signed_acl_set_ = new ::tao::SignedACLSet;
  return signed_acl_set_;
}
inline ::tao::SignedACLSet* CAResponse::release_signed_acl_set() {
  clear_has_signed_acl_set();
  ::tao::SignedACLSet* temp = signed_acl_set_;
  signed_acl_set_ = NULL;
  return temp;
}
inline void CAResponse::set_allocated_signed_acl_set(::tao::SignedACLSet* signed_acl_set) {
  delete signed_acl_set_;
  signed_acl_set_ = signed_acl_set;
  if (signed_acl_set) {
    set_has_signed_acl_set();
  } else {
    clear_has_signed_acl_set();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tao

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tao::CAType>() {
  return ::tao::CAType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ca_2eproto__INCLUDED
