// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: acl_guard.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "acl_guard.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tao {

namespace {

const ::google::protobuf::Descriptor* ACLSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACLSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignedACLSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignedACLSet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_acl_5fguard_2eproto() {
  protobuf_AddDesc_acl_5fguard_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "acl_guard.proto");
  GOOGLE_CHECK(file != NULL);
  ACLSet_descriptor_ = file->message_type(0);
  static const int ACLSet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACLSet, entries_),
  };
  ACLSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACLSet_descriptor_,
      ACLSet::default_instance_,
      ACLSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACLSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACLSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACLSet));
  SignedACLSet_descriptor_ = file->message_type(1);
  static const int SignedACLSet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedACLSet, serialized_aclset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedACLSet, signature_),
  };
  SignedACLSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignedACLSet_descriptor_,
      SignedACLSet::default_instance_,
      SignedACLSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedACLSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignedACLSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignedACLSet));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_acl_5fguard_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACLSet_descriptor_, &ACLSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignedACLSet_descriptor_, &SignedACLSet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_acl_5fguard_2eproto() {
  delete ACLSet::default_instance_;
  delete ACLSet_reflection_;
  delete SignedACLSet::default_instance_;
  delete SignedACLSet_reflection_;
}

void protobuf_AddDesc_acl_5fguard_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017acl_guard.proto\022\003tao\"\031\n\006ACLSet\022\017\n\007entr"
    "ies\030\001 \003(\t\"<\n\014SignedACLSet\022\031\n\021serialized_"
    "aclset\030\001 \002(\014\022\021\n\tsignature\030\002 \002(\014", 111);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "acl_guard.proto", &protobuf_RegisterTypes);
  ACLSet::default_instance_ = new ACLSet();
  SignedACLSet::default_instance_ = new SignedACLSet();
  ACLSet::default_instance_->InitAsDefaultInstance();
  SignedACLSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_acl_5fguard_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_acl_5fguard_2eproto {
  StaticDescriptorInitializer_acl_5fguard_2eproto() {
    protobuf_AddDesc_acl_5fguard_2eproto();
  }
} static_descriptor_initializer_acl_5fguard_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ACLSet::kEntriesFieldNumber;
#endif  // !_MSC_VER

ACLSet::ACLSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACLSet::InitAsDefaultInstance() {
}

ACLSet::ACLSet(const ACLSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACLSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACLSet::~ACLSet() {
  SharedDtor();
}

void ACLSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACLSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACLSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACLSet_descriptor_;
}

const ACLSet& ACLSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_acl_5fguard_2eproto();
  return *default_instance_;
}

ACLSet* ACLSet::default_instance_ = NULL;

ACLSet* ACLSet::New() const {
  return new ACLSet;
}

void ACLSet::Clear() {
  entries_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACLSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string entries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_entries()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->entries(this->entries_size() - 1).data(),
            this->entries(this->entries_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entries;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACLSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->entries(i).data(), this->entries(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->entries(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACLSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string entries = 1;
  for (int i = 0; i < this->entries_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entries(i).data(), this->entries(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->entries(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACLSet::ByteSize() const {
  int total_size = 0;

  // repeated string entries = 1;
  total_size += 1 * this->entries_size();
  for (int i = 0; i < this->entries_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->entries(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACLSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACLSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACLSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACLSet::MergeFrom(const ACLSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  entries_.MergeFrom(from.entries_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACLSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACLSet::CopyFrom(const ACLSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACLSet::IsInitialized() const {

  return true;
}

void ACLSet::Swap(ACLSet* other) {
  if (other != this) {
    entries_.Swap(&other->entries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACLSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACLSet_descriptor_;
  metadata.reflection = ACLSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignedACLSet::kSerializedAclsetFieldNumber;
const int SignedACLSet::kSignatureFieldNumber;
#endif  // !_MSC_VER

SignedACLSet::SignedACLSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignedACLSet::InitAsDefaultInstance() {
}

SignedACLSet::SignedACLSet(const SignedACLSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignedACLSet::SharedCtor() {
  _cached_size_ = 0;
  serialized_aclset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignedACLSet::~SignedACLSet() {
  SharedDtor();
}

void SignedACLSet::SharedDtor() {
  if (serialized_aclset_ != &::google::protobuf::internal::kEmptyString) {
    delete serialized_aclset_;
  }
  if (signature_ != &::google::protobuf::internal::kEmptyString) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void SignedACLSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignedACLSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignedACLSet_descriptor_;
}

const SignedACLSet& SignedACLSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_acl_5fguard_2eproto();
  return *default_instance_;
}

SignedACLSet* SignedACLSet::default_instance_ = NULL;

SignedACLSet* SignedACLSet::New() const {
  return new SignedACLSet;
}

void SignedACLSet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_serialized_aclset()) {
      if (serialized_aclset_ != &::google::protobuf::internal::kEmptyString) {
        serialized_aclset_->clear();
      }
    }
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::kEmptyString) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignedACLSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes serialized_aclset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialized_aclset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_signature;
        break;
      }

      // required bytes signature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignedACLSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes serialized_aclset = 1;
  if (has_serialized_aclset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->serialized_aclset(), output);
  }

  // required bytes signature = 2;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->signature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignedACLSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes serialized_aclset = 1;
  if (has_serialized_aclset()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->serialized_aclset(), target);
  }

  // required bytes signature = 2;
  if (has_signature()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->signature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignedACLSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes serialized_aclset = 1;
    if (has_serialized_aclset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->serialized_aclset());
    }

    // required bytes signature = 2;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->signature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignedACLSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignedACLSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignedACLSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignedACLSet::MergeFrom(const SignedACLSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serialized_aclset()) {
      set_serialized_aclset(from.serialized_aclset());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignedACLSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignedACLSet::CopyFrom(const SignedACLSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignedACLSet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SignedACLSet::Swap(SignedACLSet* other) {
  if (other != this) {
    std::swap(serialized_aclset_, other->serialized_aclset_);
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignedACLSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignedACLSet_descriptor_;
  metadata.reflection = SignedACLSet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tao

// @@protoc_insertion_point(global_scope)
