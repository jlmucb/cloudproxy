// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: taosupport.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "taosupport.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace taosupport {

namespace {

const ::google::protobuf::Descriptor* SimpleMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimpleMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RsaPrivateKeyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RsaPrivateKeyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* EcPrivateKeyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EcPrivateKeyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrivateKeyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrivateKeyMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_taosupport_2eproto() {
  protobuf_AddDesc_taosupport_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "taosupport.proto");
  GOOGLE_CHECK(file != NULL);
  SimpleMessage_descriptor_ = file->message_type(0);
  static const int SimpleMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMessage, message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMessage, request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMessage, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMessage, data_),
  };
  SimpleMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimpleMessage_descriptor_,
      SimpleMessage::default_instance_,
      SimpleMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimpleMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimpleMessage));
  RsaPrivateKeyMessage_descriptor_ = file->message_type(1);
  static const int RsaPrivateKeyMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RsaPrivateKeyMessage, m_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RsaPrivateKeyMessage, e_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RsaPrivateKeyMessage, d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RsaPrivateKeyMessage, p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RsaPrivateKeyMessage, q_),
  };
  RsaPrivateKeyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RsaPrivateKeyMessage_descriptor_,
      RsaPrivateKeyMessage::default_instance_,
      RsaPrivateKeyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RsaPrivateKeyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RsaPrivateKeyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RsaPrivateKeyMessage));
  EcPrivateKeyMessage_descriptor_ = file->message_type(2);
  static const int EcPrivateKeyMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EcPrivateKeyMessage, der_blob_),
  };
  EcPrivateKeyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EcPrivateKeyMessage_descriptor_,
      EcPrivateKeyMessage::default_instance_,
      EcPrivateKeyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EcPrivateKeyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EcPrivateKeyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EcPrivateKeyMessage));
  PrivateKeyMessage_descriptor_ = file->message_type(3);
  static const int PrivateKeyMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateKeyMessage, key_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateKeyMessage, rsa_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateKeyMessage, ec_key_),
  };
  PrivateKeyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrivateKeyMessage_descriptor_,
      PrivateKeyMessage::default_instance_,
      PrivateKeyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateKeyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrivateKeyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrivateKeyMessage));
  MessageType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_taosupport_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimpleMessage_descriptor_, &SimpleMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RsaPrivateKeyMessage_descriptor_, &RsaPrivateKeyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EcPrivateKeyMessage_descriptor_, &EcPrivateKeyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrivateKeyMessage_descriptor_, &PrivateKeyMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_taosupport_2eproto() {
  delete SimpleMessage::default_instance_;
  delete SimpleMessage_reflection_;
  delete RsaPrivateKeyMessage::default_instance_;
  delete RsaPrivateKeyMessage_reflection_;
  delete EcPrivateKeyMessage::default_instance_;
  delete EcPrivateKeyMessage_reflection_;
  delete PrivateKeyMessage::default_instance_;
  delete PrivateKeyMessage_reflection_;
}

void protobuf_AddDesc_taosupport_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020taosupport.proto\022\ntaosupport\"V\n\rSimple"
    "Message\022\024\n\014message_type\030\001 \002(\005\022\024\n\014request"
    "_type\030\002 \002(\t\022\013\n\003err\030\003 \001(\t\022\014\n\004data\030\004 \003(\014\"M"
    "\n\024RsaPrivateKeyMessage\022\t\n\001m\030\001 \001(\014\022\t\n\001e\030\002"
    " \001(\014\022\t\n\001d\030\003 \001(\014\022\t\n\001p\030\004 \001(\014\022\t\n\001q\030\005 \001(\014\"\'\n"
    "\023EcPrivateKeyMessage\022\020\n\010der_blob\030\001 \001(\014\"\211"
    "\001\n\021PrivateKeyMessage\022\020\n\010key_type\030\001 \002(\t\0221"
    "\n\007rsa_key\030\002 \001(\0132 .taosupport.RsaPrivateK"
    "eyMessage\022/\n\006ec_key\030\003 \001(\0132\037.taosupport.E"
    "cPrivateKeyMessage*(\n\013MessageType\022\013\n\007REQ"
    "UEST\020\001\022\014\n\010RESPONSE\020\002", 420);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "taosupport.proto", &protobuf_RegisterTypes);
  SimpleMessage::default_instance_ = new SimpleMessage();
  RsaPrivateKeyMessage::default_instance_ = new RsaPrivateKeyMessage();
  EcPrivateKeyMessage::default_instance_ = new EcPrivateKeyMessage();
  PrivateKeyMessage::default_instance_ = new PrivateKeyMessage();
  SimpleMessage::default_instance_->InitAsDefaultInstance();
  RsaPrivateKeyMessage::default_instance_->InitAsDefaultInstance();
  EcPrivateKeyMessage::default_instance_->InitAsDefaultInstance();
  PrivateKeyMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_taosupport_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_taosupport_2eproto {
  StaticDescriptorInitializer_taosupport_2eproto() {
    protobuf_AddDesc_taosupport_2eproto();
  }
} static_descriptor_initializer_taosupport_2eproto_;
const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageType_descriptor_;
}
bool MessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SimpleMessage::kMessageTypeFieldNumber;
const int SimpleMessage::kRequestTypeFieldNumber;
const int SimpleMessage::kErrFieldNumber;
const int SimpleMessage::kDataFieldNumber;
#endif  // !_MSC_VER

SimpleMessage::SimpleMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimpleMessage::InitAsDefaultInstance() {
}

SimpleMessage::SimpleMessage(const SimpleMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimpleMessage::SharedCtor() {
  _cached_size_ = 0;
  message_type_ = 0;
  request_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  err_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimpleMessage::~SimpleMessage() {
  SharedDtor();
}

void SimpleMessage::SharedDtor() {
  if (request_type_ != &::google::protobuf::internal::kEmptyString) {
    delete request_type_;
  }
  if (err_ != &::google::protobuf::internal::kEmptyString) {
    delete err_;
  }
  if (this != default_instance_) {
  }
}

void SimpleMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimpleMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimpleMessage_descriptor_;
}

const SimpleMessage& SimpleMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taosupport_2eproto();
  return *default_instance_;
}

SimpleMessage* SimpleMessage::default_instance_ = NULL;

SimpleMessage* SimpleMessage::New() const {
  return new SimpleMessage;
}

void SimpleMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_type_ = 0;
    if (has_request_type()) {
      if (request_type_ != &::google::protobuf::internal::kEmptyString) {
        request_type_->clear();
      }
    }
    if (has_err()) {
      if (err_ != &::google::protobuf::internal::kEmptyString) {
        err_->clear();
      }
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimpleMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 message_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_type_)));
          set_has_message_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_request_type;
        break;
      }

      // required string request_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_type().data(), this->request_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_err;
        break;
      }

      // optional string err = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_err:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_err()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->err().data(), this->err().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // repeated bytes data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimpleMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 message_type = 1;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->message_type(), output);
  }

  // required string request_type = 2;
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_type().data(), this->request_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->request_type(), output);
  }

  // optional string err = 3;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->err(), output);
  }

  // repeated bytes data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimpleMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 message_type = 1;
  if (has_message_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->message_type(), target);
  }

  // required string request_type = 2;
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_type().data(), this->request_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->request_type(), target);
  }

  // optional string err = 3;
  if (has_err()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->err().data(), this->err().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->err(), target);
  }

  // repeated bytes data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimpleMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 message_type = 1;
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->message_type());
    }

    // required string request_type = 2;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_type());
    }

    // optional string err = 3;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->err());
    }

  }
  // repeated bytes data = 4;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimpleMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimpleMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimpleMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimpleMessage::MergeFrom(const SimpleMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_type()) {
      set_message_type(from.message_type());
    }
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimpleMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleMessage::CopyFrom(const SimpleMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SimpleMessage::Swap(SimpleMessage* other) {
  if (other != this) {
    std::swap(message_type_, other->message_type_);
    std::swap(request_type_, other->request_type_);
    std::swap(err_, other->err_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimpleMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimpleMessage_descriptor_;
  metadata.reflection = SimpleMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RsaPrivateKeyMessage::kMFieldNumber;
const int RsaPrivateKeyMessage::kEFieldNumber;
const int RsaPrivateKeyMessage::kDFieldNumber;
const int RsaPrivateKeyMessage::kPFieldNumber;
const int RsaPrivateKeyMessage::kQFieldNumber;
#endif  // !_MSC_VER

RsaPrivateKeyMessage::RsaPrivateKeyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RsaPrivateKeyMessage::InitAsDefaultInstance() {
}

RsaPrivateKeyMessage::RsaPrivateKeyMessage(const RsaPrivateKeyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RsaPrivateKeyMessage::SharedCtor() {
  _cached_size_ = 0;
  m_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  e_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  d_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  p_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  q_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RsaPrivateKeyMessage::~RsaPrivateKeyMessage() {
  SharedDtor();
}

void RsaPrivateKeyMessage::SharedDtor() {
  if (m_ != &::google::protobuf::internal::kEmptyString) {
    delete m_;
  }
  if (e_ != &::google::protobuf::internal::kEmptyString) {
    delete e_;
  }
  if (d_ != &::google::protobuf::internal::kEmptyString) {
    delete d_;
  }
  if (p_ != &::google::protobuf::internal::kEmptyString) {
    delete p_;
  }
  if (q_ != &::google::protobuf::internal::kEmptyString) {
    delete q_;
  }
  if (this != default_instance_) {
  }
}

void RsaPrivateKeyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RsaPrivateKeyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RsaPrivateKeyMessage_descriptor_;
}

const RsaPrivateKeyMessage& RsaPrivateKeyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taosupport_2eproto();
  return *default_instance_;
}

RsaPrivateKeyMessage* RsaPrivateKeyMessage::default_instance_ = NULL;

RsaPrivateKeyMessage* RsaPrivateKeyMessage::New() const {
  return new RsaPrivateKeyMessage;
}

void RsaPrivateKeyMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m()) {
      if (m_ != &::google::protobuf::internal::kEmptyString) {
        m_->clear();
      }
    }
    if (has_e()) {
      if (e_ != &::google::protobuf::internal::kEmptyString) {
        e_->clear();
      }
    }
    if (has_d()) {
      if (d_ != &::google::protobuf::internal::kEmptyString) {
        d_->clear();
      }
    }
    if (has_p()) {
      if (p_ != &::google::protobuf::internal::kEmptyString) {
        p_->clear();
      }
    }
    if (has_q()) {
      if (q_ != &::google::protobuf::internal::kEmptyString) {
        q_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RsaPrivateKeyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes m = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_m()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_e;
        break;
      }

      // optional bytes e = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_e:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_e()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_d;
        break;
      }

      // optional bytes d = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_d()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_p;
        break;
      }

      // optional bytes p = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_p:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_p()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_q;
        break;
      }

      // optional bytes q = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_q:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_q()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RsaPrivateKeyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes m = 1;
  if (has_m()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->m(), output);
  }

  // optional bytes e = 2;
  if (has_e()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->e(), output);
  }

  // optional bytes d = 3;
  if (has_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->d(), output);
  }

  // optional bytes p = 4;
  if (has_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->p(), output);
  }

  // optional bytes q = 5;
  if (has_q()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->q(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RsaPrivateKeyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes m = 1;
  if (has_m()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->m(), target);
  }

  // optional bytes e = 2;
  if (has_e()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->e(), target);
  }

  // optional bytes d = 3;
  if (has_d()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->d(), target);
  }

  // optional bytes p = 4;
  if (has_p()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->p(), target);
  }

  // optional bytes q = 5;
  if (has_q()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->q(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RsaPrivateKeyMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes m = 1;
    if (has_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->m());
    }

    // optional bytes e = 2;
    if (has_e()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->e());
    }

    // optional bytes d = 3;
    if (has_d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->d());
    }

    // optional bytes p = 4;
    if (has_p()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->p());
    }

    // optional bytes q = 5;
    if (has_q()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->q());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RsaPrivateKeyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RsaPrivateKeyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RsaPrivateKeyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RsaPrivateKeyMessage::MergeFrom(const RsaPrivateKeyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m()) {
      set_m(from.m());
    }
    if (from.has_e()) {
      set_e(from.e());
    }
    if (from.has_d()) {
      set_d(from.d());
    }
    if (from.has_p()) {
      set_p(from.p());
    }
    if (from.has_q()) {
      set_q(from.q());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RsaPrivateKeyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RsaPrivateKeyMessage::CopyFrom(const RsaPrivateKeyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RsaPrivateKeyMessage::IsInitialized() const {

  return true;
}

void RsaPrivateKeyMessage::Swap(RsaPrivateKeyMessage* other) {
  if (other != this) {
    std::swap(m_, other->m_);
    std::swap(e_, other->e_);
    std::swap(d_, other->d_);
    std::swap(p_, other->p_);
    std::swap(q_, other->q_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RsaPrivateKeyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RsaPrivateKeyMessage_descriptor_;
  metadata.reflection = RsaPrivateKeyMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EcPrivateKeyMessage::kDerBlobFieldNumber;
#endif  // !_MSC_VER

EcPrivateKeyMessage::EcPrivateKeyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EcPrivateKeyMessage::InitAsDefaultInstance() {
}

EcPrivateKeyMessage::EcPrivateKeyMessage(const EcPrivateKeyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EcPrivateKeyMessage::SharedCtor() {
  _cached_size_ = 0;
  der_blob_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EcPrivateKeyMessage::~EcPrivateKeyMessage() {
  SharedDtor();
}

void EcPrivateKeyMessage::SharedDtor() {
  if (der_blob_ != &::google::protobuf::internal::kEmptyString) {
    delete der_blob_;
  }
  if (this != default_instance_) {
  }
}

void EcPrivateKeyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EcPrivateKeyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EcPrivateKeyMessage_descriptor_;
}

const EcPrivateKeyMessage& EcPrivateKeyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taosupport_2eproto();
  return *default_instance_;
}

EcPrivateKeyMessage* EcPrivateKeyMessage::default_instance_ = NULL;

EcPrivateKeyMessage* EcPrivateKeyMessage::New() const {
  return new EcPrivateKeyMessage;
}

void EcPrivateKeyMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_der_blob()) {
      if (der_blob_ != &::google::protobuf::internal::kEmptyString) {
        der_blob_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EcPrivateKeyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes der_blob = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_der_blob()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EcPrivateKeyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes der_blob = 1;
  if (has_der_blob()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->der_blob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EcPrivateKeyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes der_blob = 1;
  if (has_der_blob()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->der_blob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EcPrivateKeyMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes der_blob = 1;
    if (has_der_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->der_blob());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EcPrivateKeyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EcPrivateKeyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EcPrivateKeyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EcPrivateKeyMessage::MergeFrom(const EcPrivateKeyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_der_blob()) {
      set_der_blob(from.der_blob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EcPrivateKeyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EcPrivateKeyMessage::CopyFrom(const EcPrivateKeyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EcPrivateKeyMessage::IsInitialized() const {

  return true;
}

void EcPrivateKeyMessage::Swap(EcPrivateKeyMessage* other) {
  if (other != this) {
    std::swap(der_blob_, other->der_blob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EcPrivateKeyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EcPrivateKeyMessage_descriptor_;
  metadata.reflection = EcPrivateKeyMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrivateKeyMessage::kKeyTypeFieldNumber;
const int PrivateKeyMessage::kRsaKeyFieldNumber;
const int PrivateKeyMessage::kEcKeyFieldNumber;
#endif  // !_MSC_VER

PrivateKeyMessage::PrivateKeyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrivateKeyMessage::InitAsDefaultInstance() {
  rsa_key_ = const_cast< ::taosupport::RsaPrivateKeyMessage*>(&::taosupport::RsaPrivateKeyMessage::default_instance());
  ec_key_ = const_cast< ::taosupport::EcPrivateKeyMessage*>(&::taosupport::EcPrivateKeyMessage::default_instance());
}

PrivateKeyMessage::PrivateKeyMessage(const PrivateKeyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrivateKeyMessage::SharedCtor() {
  _cached_size_ = 0;
  key_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rsa_key_ = NULL;
  ec_key_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrivateKeyMessage::~PrivateKeyMessage() {
  SharedDtor();
}

void PrivateKeyMessage::SharedDtor() {
  if (key_type_ != &::google::protobuf::internal::kEmptyString) {
    delete key_type_;
  }
  if (this != default_instance_) {
    delete rsa_key_;
    delete ec_key_;
  }
}

void PrivateKeyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrivateKeyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrivateKeyMessage_descriptor_;
}

const PrivateKeyMessage& PrivateKeyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_taosupport_2eproto();
  return *default_instance_;
}

PrivateKeyMessage* PrivateKeyMessage::default_instance_ = NULL;

PrivateKeyMessage* PrivateKeyMessage::New() const {
  return new PrivateKeyMessage;
}

void PrivateKeyMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key_type()) {
      if (key_type_ != &::google::protobuf::internal::kEmptyString) {
        key_type_->clear();
      }
    }
    if (has_rsa_key()) {
      if (rsa_key_ != NULL) rsa_key_->::taosupport::RsaPrivateKeyMessage::Clear();
    }
    if (has_ec_key()) {
      if (ec_key_ != NULL) ec_key_->::taosupport::EcPrivateKeyMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrivateKeyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key_type().data(), this->key_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rsa_key;
        break;
      }

      // optional .taosupport.RsaPrivateKeyMessage rsa_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rsa_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsa_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ec_key;
        break;
      }

      // optional .taosupport.EcPrivateKeyMessage ec_key = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ec_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ec_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrivateKeyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key_type = 1;
  if (has_key_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_type().data(), this->key_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key_type(), output);
  }

  // optional .taosupport.RsaPrivateKeyMessage rsa_key = 2;
  if (has_rsa_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rsa_key(), output);
  }

  // optional .taosupport.EcPrivateKeyMessage ec_key = 3;
  if (has_ec_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ec_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrivateKeyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key_type = 1;
  if (has_key_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key_type().data(), this->key_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key_type(), target);
  }

  // optional .taosupport.RsaPrivateKeyMessage rsa_key = 2;
  if (has_rsa_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rsa_key(), target);
  }

  // optional .taosupport.EcPrivateKeyMessage ec_key = 3;
  if (has_ec_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ec_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrivateKeyMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key_type = 1;
    if (has_key_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key_type());
    }

    // optional .taosupport.RsaPrivateKeyMessage rsa_key = 2;
    if (has_rsa_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rsa_key());
    }

    // optional .taosupport.EcPrivateKeyMessage ec_key = 3;
    if (has_ec_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ec_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrivateKeyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrivateKeyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrivateKeyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrivateKeyMessage::MergeFrom(const PrivateKeyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key_type()) {
      set_key_type(from.key_type());
    }
    if (from.has_rsa_key()) {
      mutable_rsa_key()->::taosupport::RsaPrivateKeyMessage::MergeFrom(from.rsa_key());
    }
    if (from.has_ec_key()) {
      mutable_ec_key()->::taosupport::EcPrivateKeyMessage::MergeFrom(from.ec_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrivateKeyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrivateKeyMessage::CopyFrom(const PrivateKeyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateKeyMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PrivateKeyMessage::Swap(PrivateKeyMessage* other) {
  if (other != this) {
    std::swap(key_type_, other->key_type_);
    std::swap(rsa_key_, other->rsa_key_);
    std::swap(ec_key_, other->ec_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrivateKeyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrivateKeyMessage_descriptor_;
  metadata.reflection = PrivateKeyMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace taosupport

// @@protoc_insertion_point(global_scope)
